package #pkg

import com.cws.fmm.FastCollection
import com.cws.fmm.collections.ByteList
import com.cws.fmm.collections.BooleanList
import com.cws.fmm.collections.ShortList
import com.cws.fmm.collections.IntList
import com.cws.fmm.collections.LongList
import com.cws.fmm.collections.FloatList
import com.cws.fmm.collections.DoubleList

class #TMap(capacity: Int) : FastCollection {

    private val keys = #KList(capacity)
    private val values = #VList(capacity)
    private val used = BooleanList(capacity)

    override val size: Int = keys.size

    override fun release() {
        keys.release()
        values.release()
        used.release()
    }

    override fun clear() {
        keys.clear()
        values.clear()
        used.clear()
    }

    operator fun set(key: #K, value: #V) {
        val id = (key.hashCode() and Int.MAX_VALUE) % keys.size
        keys[id] = key
        values[id] = value
        used[id] = true
    }

    operator fun get(key: #K, default: #V): #V {
        val id = (key.hashCode() and Int.MAX_VALUE) % keys.size
        return if (used[id] && keys[id] == key) values[id] else default
    }

    fun contains(key: #K): Boolean {
        val id = (key.hashCode() and Int.MAX_VALUE) % keys.size
        return used[id] && keys[id] == key
    }

}